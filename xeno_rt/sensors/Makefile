## This is a project made in Ecole Centrale de Nantes
## The goal was to use Xenomai to bring somewhat of realtime capabilities to ROS

XENOMAI_PATH=/usr/xenomai

CFLAGS_OPTIONS = -Wall -Wno-unused-but-set-variable -Wno-unused-variable 

INC_XENO = $(shell $(XENOMAI_PATH)/bin/xeno-config --skin posix --cflags)
LIB_XENO = $(shell $(XENOMAI_PATH)/bin/xeno-config --skin posix --ldflags)

INC_DIRS = $(INC_XENO)

CFLAGS   = $(CFLAGS_OPTIONS) $(INC_DIRS) -I/usr/xenomai/include/trank
LDFLAGS	 = $(LIB_XENO)

SOURCES	=	xeno_ros_sensors.c
			 
CUR_DIR = ./
OBJ_DIR = obj
OUT_DIR = bin
EXEC_TARGET	= xddp-sensors
START	= start

ifeq ($(wildcard xeno_ros_sensors.c),)
CC = $(CROSS_COMPILE)gcc
else
CC = $(CROSS_COMPILE)g++
endif

LD = $(CROSS_COMPILE)ld
AS = $(CROSS_COMPILE)as

CHMOD	= /bin/chmod
MKDIR	= /bin/mkdir
ECHO	= echo
RM	= /bin/rm
#######################################################################################################
OBJECTS = $(addprefix $(OBJ_DIR)/, $(notdir $(patsubst %.c, %.o, $(patsubst %.cpp, %.o, $(SOURCES)))))
#######################################################################################################
vpath %.c  $(CUR_DIR) $(INC_SERVO) $(INC_EMBD)
vpath %.cpp $(CUR_DIR) $(INC_SERVO) $(INC_EMBD)
#######################################################################################################

ifeq ($(wildcard $(START).sh),)
all: 	$(OUT_DIR)/$(EXEC_TARGET) $(START)
	@$(ECHO) BUILD DONE.
	@$(CHMOD) +x $(START).sh
else
all: 
	@$(ECHO) BUILD ERROR: Run make clean first!
endif

$(START): 
	@printf "## This is a project made within Ecole Centrale de Nantes \n" > $(START).sh
	@printf "## Embedded Real Time Systems path - Erwin Lejeune \n\n" >> $(START).sh
	@printf "## Start-up for dynamically linked executable file \n\n\n\n" >> $(START).sh
	@printf "export LD_LIBRARY_PATH=$(XENOMAI_PATH)/lib:$(LIB_DIR):$(LIB_URG) \n" >> $(START).sh
	@printf "./$(OUT_DIR)/$(EXEC_TARGET)\n" >> $(START).sh

$(OUT_DIR)/$(EXEC_TARGET): $(OBJECTS)
	@$(MKDIR) -p $(OUT_DIR); pwd > /dev/null
	$(CC) -o $(OUT_DIR)/$(EXEC_TARGET) $(OBJECTS) $(LDFLAGS)

$(OBJ_DIR)/%.o : %.cpp
	@$(MKDIR) -p $(OBJ_DIR); pwd > /dev/null
	$(CC) -MD $(CFLAGS) -c -o $@ $<

$(OBJ_DIR)/%.o : %.c
	@$(MKDIR) -p $(OBJ_DIR); pwd > /dev/null
	$(CC) -MD $(CFLAGS) -c -o $@ $<

clean:
	$(RM) -rf \
		$(OBJ_DIR)/* \
		$(OBJ_DIR)   \
			$(OUT_DIR)/* \
			$(OUT_DIR)   \
			*.dat	     \
		$(START)*
re:
	make clean
	make -j4


.PHONY: all clean 
#######################################################################################################
# Include header file dependencies generated by -MD option:
-include $(OBJ_DIR_CUR)/*.d


